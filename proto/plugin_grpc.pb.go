// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: plugin.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PluginService_HealthCheck_FullMethodName           = "/plugin.PluginService/HealthCheck"
	PluginService_GetPluginInfo_FullMethodName         = "/plugin.PluginService/GetPluginInfo"
	PluginService_GetPluginCapabilities_FullMethodName = "/plugin.PluginService/GetPluginCapabilities"
	PluginService_ProcessHttpRequest_FullMethodName    = "/plugin.PluginService/ProcessHttpRequest"
	PluginService_ProcessHttpResponse_FullMethodName   = "/plugin.PluginService/ProcessHttpResponse"
	PluginService_ProcessTunnelData_FullMethodName     = "/plugin.PluginService/ProcessTunnelData"
)

// PluginServiceClient is the client API for PluginService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Main service that plugin providers implement.
type PluginServiceClient interface {
	// Home made health check endpoint to verify the plugin is running.
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	// Retrieves basic plugin info like name, version, etc.
	GetPluginInfo(ctx context.Context, in *GetPluginInfoRequest, opts ...grpc.CallOption) (*GetPluginInfoResponse, error)
	// Retrieves the plugin's capabilities (e.g., can handle HTTP, can handle tunnels).
	GetPluginCapabilities(ctx context.Context, in *GetPluginCapabilitiesRequest, opts ...grpc.CallOption) (*GetPluginCapabilitiesResponse, error)
	// Processes an HTTP request, potentially modifying it or aborting.
	ProcessHttpRequest(ctx context.Context, in *ProcessHttpRequestRequest, opts ...grpc.CallOption) (*ProcessHttpRequestResponse, error)
	// Processes an HTTP response, potentially modifying it or aborting.
	ProcessHttpResponse(ctx context.Context, in *ProcessHttpResponseRequest, opts ...grpc.CallOption) (*ProcessHttpResponseResponse, error)
	// Processes a chunk of data in a tunneled connection (TCP or TLS).
	// You can call this repeatedly as data flows from client to server or server to client.
	// The plugin can choose to pass through, modify, buffer, or close the connection.
	ProcessTunnelData(ctx context.Context, in *ProcessTunnelDataRequest, opts ...grpc.CallOption) (*ProcessTunnelDataResponse, error)
}

type pluginServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPluginServiceClient(cc grpc.ClientConnInterface) PluginServiceClient {
	return &pluginServiceClient{cc}
}

func (c *pluginServiceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, PluginService_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginServiceClient) GetPluginInfo(ctx context.Context, in *GetPluginInfoRequest, opts ...grpc.CallOption) (*GetPluginInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPluginInfoResponse)
	err := c.cc.Invoke(ctx, PluginService_GetPluginInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginServiceClient) GetPluginCapabilities(ctx context.Context, in *GetPluginCapabilitiesRequest, opts ...grpc.CallOption) (*GetPluginCapabilitiesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPluginCapabilitiesResponse)
	err := c.cc.Invoke(ctx, PluginService_GetPluginCapabilities_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginServiceClient) ProcessHttpRequest(ctx context.Context, in *ProcessHttpRequestRequest, opts ...grpc.CallOption) (*ProcessHttpRequestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProcessHttpRequestResponse)
	err := c.cc.Invoke(ctx, PluginService_ProcessHttpRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginServiceClient) ProcessHttpResponse(ctx context.Context, in *ProcessHttpResponseRequest, opts ...grpc.CallOption) (*ProcessHttpResponseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProcessHttpResponseResponse)
	err := c.cc.Invoke(ctx, PluginService_ProcessHttpResponse_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginServiceClient) ProcessTunnelData(ctx context.Context, in *ProcessTunnelDataRequest, opts ...grpc.CallOption) (*ProcessTunnelDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProcessTunnelDataResponse)
	err := c.cc.Invoke(ctx, PluginService_ProcessTunnelData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PluginServiceServer is the server API for PluginService service.
// All implementations must embed UnimplementedPluginServiceServer
// for forward compatibility.
//
// Main service that plugin providers implement.
type PluginServiceServer interface {
	// Home made health check endpoint to verify the plugin is running.
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	// Retrieves basic plugin info like name, version, etc.
	GetPluginInfo(context.Context, *GetPluginInfoRequest) (*GetPluginInfoResponse, error)
	// Retrieves the plugin's capabilities (e.g., can handle HTTP, can handle tunnels).
	GetPluginCapabilities(context.Context, *GetPluginCapabilitiesRequest) (*GetPluginCapabilitiesResponse, error)
	// Processes an HTTP request, potentially modifying it or aborting.
	ProcessHttpRequest(context.Context, *ProcessHttpRequestRequest) (*ProcessHttpRequestResponse, error)
	// Processes an HTTP response, potentially modifying it or aborting.
	ProcessHttpResponse(context.Context, *ProcessHttpResponseRequest) (*ProcessHttpResponseResponse, error)
	// Processes a chunk of data in a tunneled connection (TCP or TLS).
	// You can call this repeatedly as data flows from client to server or server to client.
	// The plugin can choose to pass through, modify, buffer, or close the connection.
	ProcessTunnelData(context.Context, *ProcessTunnelDataRequest) (*ProcessTunnelDataResponse, error)
	mustEmbedUnimplementedPluginServiceServer()
}

// UnimplementedPluginServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPluginServiceServer struct{}

func (UnimplementedPluginServiceServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedPluginServiceServer) GetPluginInfo(context.Context, *GetPluginInfoRequest) (*GetPluginInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPluginInfo not implemented")
}
func (UnimplementedPluginServiceServer) GetPluginCapabilities(context.Context, *GetPluginCapabilitiesRequest) (*GetPluginCapabilitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPluginCapabilities not implemented")
}
func (UnimplementedPluginServiceServer) ProcessHttpRequest(context.Context, *ProcessHttpRequestRequest) (*ProcessHttpRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessHttpRequest not implemented")
}
func (UnimplementedPluginServiceServer) ProcessHttpResponse(context.Context, *ProcessHttpResponseRequest) (*ProcessHttpResponseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessHttpResponse not implemented")
}
func (UnimplementedPluginServiceServer) ProcessTunnelData(context.Context, *ProcessTunnelDataRequest) (*ProcessTunnelDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessTunnelData not implemented")
}
func (UnimplementedPluginServiceServer) mustEmbedUnimplementedPluginServiceServer() {}
func (UnimplementedPluginServiceServer) testEmbeddedByValue()                       {}

// UnsafePluginServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PluginServiceServer will
// result in compilation errors.
type UnsafePluginServiceServer interface {
	mustEmbedUnimplementedPluginServiceServer()
}

func RegisterPluginServiceServer(s grpc.ServiceRegistrar, srv PluginServiceServer) {
	// If the following call pancis, it indicates UnimplementedPluginServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PluginService_ServiceDesc, srv)
}

func _PluginService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PluginService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServiceServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginService_GetPluginInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPluginInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServiceServer).GetPluginInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PluginService_GetPluginInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServiceServer).GetPluginInfo(ctx, req.(*GetPluginInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginService_GetPluginCapabilities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPluginCapabilitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServiceServer).GetPluginCapabilities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PluginService_GetPluginCapabilities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServiceServer).GetPluginCapabilities(ctx, req.(*GetPluginCapabilitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginService_ProcessHttpRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessHttpRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServiceServer).ProcessHttpRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PluginService_ProcessHttpRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServiceServer).ProcessHttpRequest(ctx, req.(*ProcessHttpRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginService_ProcessHttpResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessHttpResponseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServiceServer).ProcessHttpResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PluginService_ProcessHttpResponse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServiceServer).ProcessHttpResponse(ctx, req.(*ProcessHttpResponseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginService_ProcessTunnelData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessTunnelDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServiceServer).ProcessTunnelData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PluginService_ProcessTunnelData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServiceServer).ProcessTunnelData(ctx, req.(*ProcessTunnelDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PluginService_ServiceDesc is the grpc.ServiceDesc for PluginService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PluginService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "plugin.PluginService",
	HandlerType: (*PluginServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _PluginService_HealthCheck_Handler,
		},
		{
			MethodName: "GetPluginInfo",
			Handler:    _PluginService_GetPluginInfo_Handler,
		},
		{
			MethodName: "GetPluginCapabilities",
			Handler:    _PluginService_GetPluginCapabilities_Handler,
		},
		{
			MethodName: "ProcessHttpRequest",
			Handler:    _PluginService_ProcessHttpRequest_Handler,
		},
		{
			MethodName: "ProcessHttpResponse",
			Handler:    _PluginService_ProcessHttpResponse_Handler,
		},
		{
			MethodName: "ProcessTunnelData",
			Handler:    _PluginService_ProcessTunnelData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "plugin.proto",
}
